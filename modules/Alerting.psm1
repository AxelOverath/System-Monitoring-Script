<#
.SYNOPSIS
    Threshold-based alert evaluation and email notifications.
.DESCRIPTION
    Provides functions to compare collected metrics against configured thresholds
    and to send email alerts when thresholds are exceeded.
#>

<#
.SYNOPSIS
    Evaluates metrics against threshold values.
.PARAMETER Metrics
    Array of metric PSCustomObjects with properties: Server, CPUUsagePercent,
    MemoryUsagePercent, DiskUsagePercent, Timestamp.
.PARAMETER Thresholds
    Hashtable containing threshold values: CpuThreshold, MemoryThreshold, DiskThreshold.
.OUTPUTS
    PSCustomObject[] of alerts with properties: Server, Metric, Value, Threshold, Timestamp.
.EXAMPLE
    $alerts = Evaluate-Thresholds -Metrics $metrics -Thresholds $Config
#>
function Evaluate-Thresholds {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)][PSCustomObject[]]$Metrics,
        [Parameter(Mandatory)][hashtable]$Thresholds
    )
    $alerts = @()

    foreach ($m in $Metrics) {
        if ($m.CPUUsagePercent -gt $Thresholds.Thresholds.Cpu) {
            $alerts += [PSCustomObject]@{
                Server    = $m.Server
                Metric    = 'CPU'
                Value     = $m.CPUUsagePercent
                Threshold = $Thresholds.Thresholds.Cpu
                Timestamp = $m.Timestamp
            }
        }
        if ($m.MemoryUsagePercent -gt $Thresholds.Thresholds.Memory) {
            $alerts += [PSCustomObject]@{
                Server    = $m.Server
                Metric    = 'Memory'
                Value     = $m.MemoryUsagePercent
                Threshold = $Thresholds.Thresholds.Memory
                Timestamp = $m.Timestamp
            }
        }
        if ($m.DiskUsagePercent -gt $Thresholds.Thresholds.Disk) {
            $alerts += [PSCustomObject]@{
                Server    = $m.Server
                Metric    = 'Disk'
                Value     = $m.DiskUsagePercent
                Threshold = $Thresholds.Thresholds.Disk
                Timestamp = $m.Timestamp
            }
        }
    }
    return $alerts
}

<#
.SYNOPSIS
    Sends email notifications for triggered alerts.
.PARAMETER Alerts
    Array of alert PSCustomObjects from Evaluate-Thresholds.
.PARAMETER Config
    Hashtable containing EmailFrom, EmailTo, SmtpServer settings.
.EXAMPLE
    Send-Alerts -Alerts $alerts -Config $Config
#>
function Send-Alerts {
    [CmdletBinding()]
    param(
        [Parameter()][PSCustomObject[]]$Alerts,
        [Parameter(Mandatory)][hashtable]$Config
    )
    if (-not $Alerts -or $Alerts.Count -eq 0) {
        Write-Host "No alerts to send."
        return
    }

    # Check if email notifications are enabled
    if (-not $Config.Email.Enabled) {
        Write-Host "Email notifications are disabled. Alerts would have been sent for:"
        foreach ($a in $Alerts) {
            Write-Host "  - $($a.Server): $($a.Metric) = $($a.Value)% (Threshold: $($a.Threshold)% at $($a.Timestamp))"
        }
        return
    }

    # Build HTML email body
    $htmlBody = @"
<html>
<head>
    <style>
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #ddd; padding: 8px; }
        th { background-color: #f2f2f2; text-align: left; }
        tr:nth-child(even){background-color: #f9f9f9;}
        h2 { font-family: Arial, sans-serif; }
        p  { font-family: Arial, sans-serif; }
    </style>
</head>
<body>
    <h2>System Health Alerts</h2>
    <p>The following thresholds were exceeded:</p>
    <table>
        <tr>
            <th>Server</th>
            <th>Metric</th>
            <th>Value (%)</th>
            <th>Threshold (%)</th>
            <th>Time</th>
        </tr>
"@

    foreach ($a in $Alerts) {
        $htmlBody += "        <tr>"
        $htmlBody += "<td>$($a.Server)</td>"
        $htmlBody += "<td>$($a.Metric)</td>"
        $htmlBody += "<td>$($a.Value)</td>"
        $htmlBody += "<td>$($a.Threshold)</td>"
        $htmlBody += "<td>$($a.Timestamp)</td>"
        $htmlBody += "</tr>`n"
    }

    $htmlBody += @"
    </table>
    <p>Generated by System Health Monitoring Script.</p>
</body>
</html>
"@

    try {
        # Prepare Send-MailMessage parameters
        $mailParams = @{
            From       = $Config.Email.From
            To         = $Config.Email.To
            Subject    = "[ALERT] System Health Threshold Exceeded"
            Body       = $htmlBody
            SmtpServer = $Config.Email.SmtpServer
            BodyAsHtml = $true
        }
        if ($Config.Email.SmtpPort)  { $mailParams.Port       = $Config.Email.SmtpPort }
        if ($Config.Email.UseSsl)    { $mailParams.UseSsl     = $Config.Email.UseSsl }
        if ($Config.Email.SmtpUsername -and $Config.Email.SmtpPassword) {
            $securePwd = ConvertTo-SecureString $Config.Email.SmtpPassword -AsPlainText -Force
            $mailParams.Credential = New-Object System.Management.Automation.PSCredential($Config.Email.SmtpUsername, $securePwd)
        }

        Send-MailMessage @mailParams
        Write-Host "Alert email sent successfully to $($Config.Email.To)"
    }
    catch {
        Write-Warning "Failed to send alert email: $_"
        Write-Host "Alert details that failed to send:"
        foreach ($a in $Alerts) {
            Write-Host "  - $($a.Server): $($a.Metric) = $($a.Value)% (Threshold: $($a.Threshold)% at $($a.Timestamp))"
        }
    }
}

Export-ModuleMember -Function Evaluate-Thresholds, Send-Alerts
